from pykd import *
import sys
import struct

def main(argv):
	
	if len(argv) == 0:
		print "Usage: !py filter.py from_level to_level filtered"
		print "Filtered syscalls for 5th lvl: !py filter.py 5 5 1"
		exit(-1)
	ntMod = module("nt")
	KeServiceDescriptorTableFilter = int(ntMod.KeServiceDescriptorTableFilter)

	win32Mod = module("win32k")
	W32pServiceTableFilter = int(win32Mod.W32pServiceTableFilter)
	W32pServiceLimitFilter = loadDWords(win32Mod.W32pServiceLimitFilter, 1)[0] + 0x1000
	print hex(W32pServiceTableFilter)
	
	win32BaseMod = module("win32kbase")
	gaWin32KFilterBitmap = int(win32BaseMod.gaWin32KFilterBitmap)
	
	from_lvl = int(argv[0])
	to_lvl = int(argv[1])
	filter = int(argv[2])
	sum = 0
	syscallsLimit = W32pServiceLimitFilter - 0x1000
	
	for i in range(from_lvl, to_lvl + 1):
		bitmap = loadQWords(gaWin32KFilterBitmap + i * 8, 1)[0]
		
		print "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="
		print "Bitmap filter level " + hex(i)
		if not bitmap:
			continue
		
		for j in range(0x1000, W32pServiceLimitFilter):
			syscallNum = j & 0xfff
			offset =  loadDWords(W32pServiceTableFilter + syscallNum * 4, 1)[0]
			offset = (0xfffffffff0000000 | (offset >> 4))
			syscall = W32pServiceTableFilter + offset
			syscall = syscall % 2**64
			bits = loadBytes(bitmap + (syscallNum >> 3), 1)[0]
			filtered = bits & (1 << (syscallNum & 7))
			filtered = filtered != 0
		
			if filtered == filter:
				sum = sum + 1
				print findSymbol(syscall) + " " + hex(j)
		
		if filter:
			print "number of filtered system calls"
		else:
			print "number of allowed system calls"
		print str(syscallsLimit) + "/" + str(sum)

	
	exit(0)
	
		
if __name__ == "__main__":
    main(sys.argv[1:])